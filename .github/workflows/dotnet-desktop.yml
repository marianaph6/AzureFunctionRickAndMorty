name: Build and deploy .NET Core Function App to Azure Function App - IntegracionContinuaFunction

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.' # Ruta al proyecto de la Azure Function App, se puede ajustar según el repositorio
  DOTNET_VERSION: '8.0.x' # Versión de .NET Core a usar
  COVERAGE_THRESHOLD: 80 # Umbral mínimo de cobertura de código en porcentaje
  MUTATION_THRESHOLD: 60 # Umbral mínimo de cobertura de mutaciones en porcentaje

jobs:
  build:
    runs-on: windows-latest
    permissions:
      id-token: write # Requerido para solicitar el JWT

    steps:
      # Paso 1: Checkout del repositorio
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v4

      # Paso 2: Configuración del entorno de .NET Core
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Paso 3: Restaurar las dependencias del proyecto
      - name: 'Restore dependencies'
        run: dotnet restore

      # Paso 4: Compilar el proyecto
      - name: 'Build project'
        run: dotnet build --configuration Release

# Paso 6: Ejecutar pruebas unitarias y generar reporte de cobertura
      - name: 'Run Unit Tests and Generate Coverage Report'
        run: |
          dotnet test --no-build --configuration Release /p:CollectCoverage=true /p:CoverletOutput=./coverage/ --p:CoverletOutputFormat=opencover
      
      # Paso 7: Validar la cobertura de código
      - name: 'Validate Code Coverage'
        shell: pwsh
        run: |
          # Verificar si el archivo de cobertura existe
          if (Test-Path "./coverage/coverage.opencover.xml") {
              # Parsear el archivo de cobertura para extraer el porcentaje
              $coverageReport = Get-Content "./coverage/coverage.opencover.xml"
              [xml]$coverageXml = $coverageReport
              
              # Extraer el porcentaje de cobertura (ajusta esto según el formato del archivo XML)
              $covered = [float]($coverageXml.CoverageSession.Summary.SequenceCoverage)
              Write-Host "Code coverage: $covered%"
              
              # Validar si el porcentaje es suficiente
              if ($covered -lt 80) {
                  Write-Error "Coverage is below 80%! ($covered%)"
                  exit 1
              } else {
                  Write-Host "Coverage meets the threshold. ($covered%)"
              }
          } else {
              Write-Error "Coverage report not found."
              exit 1
          }

      # Paso 7: Publicar el proyecto
      - name: 'Publish project'
        run: dotnet publish --configuration Release --output ./output

      # Paso 8: Subir el artefacto
      - name: 'Upload artifact'
        uses: actions/upload-artifact@v3
        with:
          name: function-app-package
          path: './output'

      # Paso 9: Ejecutar Stryker para validación de pruebas
      - name: 'Run Stryker Mutator'
        run: |
          dotnet tool restore
          dotnet stryker --break-on-low-mutation=${{ env.MUTATION_THRESHOLD }}

      # Paso 10: Validar porcentaje de mutación
      - name: 'Validate Mutation Testing'
        shell: pwsh
        run: |
          $mutationReport = Get-Content -Raw -Path "reports/mutation-report.json" | ConvertFrom-Json
          $mutationScore = $mutationReport.totals.mutationScore
          if ($mutationScore -lt ${{ env.MUTATION_THRESHOLD }}) {
            Write-Error "Mutation score is below threshold! ($mutationScore%)"
            exit 1
          }
          Write-Host "Mutation score meets the threshold. ($mutationScore%)"
